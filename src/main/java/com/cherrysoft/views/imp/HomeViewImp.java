package com.cherrysoft.views.imp;

import com.cherrysoft.core.CalculationResult;
import com.cherrysoft.core.InputMatrix;
import com.cherrysoft.views.HomeView;
import com.cherrysoft.views.MatrixPanelsRenderer;
import com.cherrysoft.views.imp.components.MatrixGridPanelParent;

import javax.swing.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class HomeViewImp extends JFrame implements HomeView {
  public MatrixPanelsRenderer matrixPanelsRenderer;
  private HomeView.Listener listener;

  public HomeViewImp() {
    initComponents();
    hookUpEvents();
    initLookAndFeel();
  }

  private void hookUpEvents() {
    btnCalculateResult.addActionListener(e -> listener.onCalculateResult());
    btnSetOrderOfMatrix.addActionListener(e -> listener.onSetOrderOfMatrix());
    btnShowSecondaryMatrix.addActionListener(e -> listener.onShowSecondaryMatrix());
    btnClearAll.addActionListener(e -> listener.onClearAll());
    ckbUseSecondaryMatrix.addActionListener(e -> btnShowSecondaryMatrix.setEnabled(useSecondaryMatrix()));
    addWindowListener(new WindowAdapter() {
      @Override
      public void windowClosing(WindowEvent e) {
        listener.onSystemClosing();
      }
    });
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    btnSetOrderOfMatrix = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    jPanel7 = new javax.swing.JPanel();
    jPanel8 = new javax.swing.JPanel();
    btnCalculateResult = new javax.swing.JButton();
    jPanel9 = new javax.swing.JPanel();
    btnClearAll = new javax.swing.JButton();
    btnShowSecondaryMatrix = new javax.swing.JButton();
    ckbUseSecondaryMatrix = new javax.swing.JCheckBox();
    filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
    jLabel4 = new javax.swing.JLabel();
    txtDeterminant = new javax.swing.JTextField();
    spOrderOfMatrix = new javax.swing.JSpinner();
    spScalar = new javax.swing.JSpinner();
    inputMatrixPanel = new MatrixGridPanelParent();
    matrixSumResultPanel = new MatrixGridPanelParent();
    matrixDotProductResultPanel = new MatrixGridPanelParent();
    matrixMultipliedByScalarResultPanel = new MatrixGridPanelParent();
    matrixInverseResultPanel = new MatrixGridPanelParent();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setMinimumSize(new java.awt.Dimension(800, 710));
    setPreferredSize(new java.awt.Dimension(800, 710));
    getContentPane().setLayout(new java.awt.GridLayout(3, 2));

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Entrada"));
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Calculadora de matrices");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    jPanel1.add(jLabel1, gridBagConstraints);

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel2.setText("Orden de la matriz:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    jPanel1.add(jLabel2, gridBagConstraints);

    btnSetOrderOfMatrix.setText("Definir");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    jPanel1.add(btnSetOrderOfMatrix, gridBagConstraints);

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel3.setText("Define un escalar:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    jPanel1.add(jLabel3, gridBagConstraints);

    jPanel7.setLayout(new java.awt.BorderLayout());

    jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    btnCalculateResult.setText("Calcular");
    jPanel8.add(btnCalculateResult);

    jPanel7.add(jPanel8, java.awt.BorderLayout.SOUTH);

    jPanel9.setLayout(new java.awt.GridBagLayout());

    btnClearAll.setText("Limpiar todos los campos");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 1, 1, 1);
    jPanel9.add(btnClearAll, gridBagConstraints);

    btnShowSecondaryMatrix.setText("Establecer una segunda matriz");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.insets = new java.awt.Insets(5, 1, 0, 1);
    jPanel9.add(btnShowSecondaryMatrix, gridBagConstraints);

    ckbUseSecondaryMatrix.setSelected(true);
    ckbUseSecondaryMatrix.setText("Habilitar segunda matriz");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel9.add(ckbUseSecondaryMatrix, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 0.1;
    jPanel9.add(filler1, gridBagConstraints);

    jPanel7.add(jPanel9, java.awt.BorderLayout.CENTER);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.weighty = 0.1;
    jPanel1.add(jPanel7, gridBagConstraints);

    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel4.setText("Determinante:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    jPanel1.add(jLabel4, gridBagConstraints);

    txtDeterminant.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    jPanel1.add(txtDeterminant, gridBagConstraints);

    spOrderOfMatrix.setModel(new javax.swing.SpinnerNumberModel(3, 3, 10, 1));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    jPanel1.add(spOrderOfMatrix, gridBagConstraints);

    spScalar.setModel(new javax.swing.SpinnerNumberModel(1.0d, null, null, 1.0d));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
    jPanel1.add(spScalar, gridBagConstraints);

    getContentPane().add(jPanel1);

    inputMatrixPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Matriz"));
    inputMatrixPanel.setLayout(new java.awt.BorderLayout());
    getContentPane().add(inputMatrixPanel);

    matrixSumResultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Suma con otra matriz"));
    matrixSumResultPanel.setLayout(new java.awt.BorderLayout());
    getContentPane().add(matrixSumResultPanel);

    matrixDotProductResultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Multiplicación con otra matriz"));
    matrixDotProductResultPanel.setLayout(new java.awt.BorderLayout());
    getContentPane().add(matrixDotProductResultPanel);

    matrixMultipliedByScalarResultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Multiplicación por escalar"));
    matrixMultipliedByScalarResultPanel.setLayout(new java.awt.BorderLayout());
    getContentPane().add(matrixMultipliedByScalarResultPanel);

    matrixInverseResultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Inversa de la matriz"));
    matrixInverseResultPanel.setLayout(new java.awt.BorderLayout());
    getContentPane().add(matrixInverseResultPanel);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void initLookAndFeel() {
    try {
      for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels())
        if ("Windows".equals(info.getName())) {
          UIManager.setLookAndFeel(info.getClassName());
          break;
        }
    } catch (ClassNotFoundException |
      InstantiationException |
      IllegalAccessException |
      UnsupportedLookAndFeelException ex) {
      System.out.println(ex.getMessage());
    }
  }

  public JTextField getTxtDeterminant() {
    return txtDeterminant;
  }

  @Override
  public InputMatrix getInputMatrix() {
    return new InputMatrix(inputMatrixPanel.getChildMatrixAsRawMatrix());
  }

  @Override
  public double getScalar() {
    return (double) spScalar.getValue();
  }

  @Override
  public int getOrderOfMatrix() {
    return (int) spOrderOfMatrix.getValue();
  }

  @Override
  public void setOrderOfMatrix(int orderOfMatrix) {
    spOrderOfMatrix.setValue(orderOfMatrix);
  }

  @Override
  public boolean useSecondaryMatrix() {
    return ckbUseSecondaryMatrix.isSelected();
  }

  @Override
  public void setInitialInputMatrixState(InputMatrix inputMatrix) {
    matrixPanelsRenderer = new MatrixPanelsRenderer(
      inputMatrix.orderOfMatrix(),
      matrixGridPanelParents()
    );
    inputMatrixPanel.fillChildInputFieldsWith(inputMatrix.getRawMatrix());
  }

  @Override
  public void showCalculatedDeterminant(double determinant) {

  }

  @Override
  public void showCalculationResult(CalculationResult calculationResult) {

  }

  @Override
  public void clearAll() {
    for (MatrixGridPanelParent panelParent : matrixGridPanelParents()) {
      panelParent.clearChildInputFields();
    }
    txtDeterminant.setText("");
  }

  @Override
  public void showError(String message) {
    System.out.println(message);
  }

  @Override
  public void setListener(Listener listener) {
    this.listener = listener;
  }

  private MatrixGridPanelParent[] matrixGridPanelParents() {
    return new MatrixGridPanelParent[]{
      inputMatrixPanel,
      matrixSumResultPanel,
      matrixInverseResultPanel,
      matrixDotProductResultPanel,
      matrixMultipliedByScalarResultPanel
    };
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnCalculateResult;
  private javax.swing.JButton btnSetOrderOfMatrix;
  private javax.swing.JButton btnClearAll;
  private javax.swing.JButton btnShowSecondaryMatrix;
  private javax.swing.JCheckBox ckbUseSecondaryMatrix;
  private javax.swing.Box.Filler filler1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel7;
  private javax.swing.JPanel jPanel8;
  private javax.swing.JPanel jPanel9;
  private MatrixGridPanelParent matrixInverseResultPanel;
  private MatrixGridPanelParent inputMatrixPanel;
  private MatrixGridPanelParent matrixMultipliedByScalarResultPanel;
  private MatrixGridPanelParent matrixDotProductResultPanel;
  private MatrixGridPanelParent matrixSumResultPanel;
  private javax.swing.JSpinner spScalar;
  private javax.swing.JSpinner spOrderOfMatrix;
  private javax.swing.JTextField txtDeterminant;
  // End of variables declaration//GEN-END:variables
}
